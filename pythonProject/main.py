from connect import *
from telebot import *
from telegram import ReplyKeyboardMarkup
from telebot import types
import datetime
import random
from statistics import *
import time


bot = telebot.TeleBot('***********************************************')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ
def generate_all_answers_on_question_1(callback):

	# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	config = load_config()
	connection = psycopg2.connect(**config)
	cursor = connection.cursor()

	# –ú–∞—Å—Å–∏–≤ –≤ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥—É—Ç —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤—Å–µ –æ—Ç–≤–µ—Ç—ã
	answers = []

	# –î–æ–±–∞–≤–ª—è—é –≤ answers –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
	cursor.execute("SELECT answer_true FROM results WHERE user_id = %s ORDER BY answer_num_all DESC LIMIT 1", (callback.from_user.id, ))
	answers.append(cursor.fetchone()[0])

	while len(answers) < 8:
		cursor.execute("SELECT answer FROM questions_1 ORDER BY RANDOM() LIMIT 1")
		res = cursor.fetchone()[0]
		if res not in answers:
			answers.append(res)
		else:
			continue

	random.shuffle(answers)

	cursor.execute("UPDATE results SET answer_all = %s WHERE user_id = %s AND "
				   "answer_num_all = (SELECT answer_num_all FROM results "
				   "WHERE user_id = %s ORDER BY answer_num_all DESC LIMIT 1)", (answers, callback.from_user.id, callback.from_user.id))

	# –ó–∞–∫—Ä—ã–≤–∞—é —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π
	connection.commit()
	cursor.close()
	connection.close()


def generate_all_answers_on_question_3(callback):

	# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	config = load_config()
	connection = psycopg2.connect(**config)
	cursor = connection.cursor()

	# –ú–∞—Å—Å–∏–≤ –≤ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥—É—Ç —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤—Å–µ –æ—Ç–≤–µ—Ç—ã
	answers = []

	# –î–æ–±–∞–≤–ª—è—é –≤ answers id –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
	cursor.execute("SELECT id FROM results WHERE user_id = %s ORDER BY answer_num_all DESC LIMIT 1",
				   (callback.from_user.id, ))
	answer_true = cursor.fetchone()[0]
	answers.append(answer_true)
	connection.commit()

	while len(answers) < 4:
		cursor.execute("SELECT id FROM questions_3 ORDER BY RANDOM() LIMIT 1")
		res = cursor.fetchone()[0]
		if res not in answers:
			answers.append(res)
		else:
			continue

	random.shuffle(answers)

	# –ó–¥–µ—Å—å –µ—â–µ –±—É–¥–µ—Ç —á–∞—Å—Ç—å –ø–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
	position_true = answers.index(answer_true)

	cursor.execute("UPDATE results SET answer_true = %s, answer_all = %s WHERE user_id = %s AND "
				   "answer_num_all = (SELECT answer_num_all FROM results "
				   "WHERE user_id = %s ORDER BY answer_num_all DESC LIMIT 1)",
				   (position_true, answers, callback.from_user.id, callback.from_user.id))

	connection.commit()
	cursor.close()
	connection.close()


# –ó–¥–µ—Å—å –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –≥–ª–∞–≤–Ω–æ–π –º–µ–Ω—é—à–∫–µ –æ—Ç –ø—Ä–µ–≤—å—é
@bot.message_handler(commands=['start'])
def send_welcome(message):

	# –ó–¥–µ—Å—å —è —Å–æ—Ö—Ä–∞–Ω—è—é name –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ id
	config = load_config()
	connection = psycopg2.connect(**config)
	cursor = connection.cursor()

	cursor.execute(
					"INSERT INTO users (user_id, username, user_state) VALUES (%s, %s, %s) ON CONFLICT (user_id)"
							" DO UPDATE SET username = EXCLUDED.username, user_state = EXCLUDED.user_state",
						(message.from_user.id, message.from_user.username, 'start')
					)

	cursor.execute("INSERT INTO statistics (user_id) VALUES (%s) ON CONFLICT (user_id)"
				   "DO UPDATE SET user_id = EXCLUDED.user_id", (message.from_user.id, ))

	connection.commit()
	cursor.close()
	connection.close()

	markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
	btn_menu = types.KeyboardButton('üí¨ –ú–µ–Ω—é')
	markup.row(btn_menu)
	bot.delete_message(message.chat.id, message.message_id)
	bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –ï–ì–≠ –ø–æ –∏—Å—Ç–æ—Ä–∏–∏. \n \n'
									  '–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´*üí¨ –ú–µ–Ω—é*¬ª, —á—Ç–æ–±—ã –≤—ã–∑–≤–∞—Ç—å –ø–∞–Ω–µ–ª—å —Å–æ –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏',
					 				  reply_markup=markup, parse_mode="Markdown")


# –ó–¥–µ—Å—å –±—É–¥–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@bot.message_handler(content_types=['text'])
def on_click(message):

	# –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	config = load_config()
	connection = psycopg2.connect(**config)
	cursor = connection.cursor()

	if message.text != 'üí¨ –ú–µ–Ω—é':
		bot.delete_message(message.chat.id, message.message_id)

	elif message.text == 'üí¨ –ú–µ–Ω—é':

		# –ü–æ–ª—É—á–∞—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ —é–∑–µ—Ä–∞
		cursor.execute("SELECT user_state FROM users WHERE user_id = %s", (message.from_user.id, ))
		user_state = cursor.fetchone()[0]

		current_date = datetime.datetime.now().strftime('%Y-%m-%d')
		current_time = datetime.datetime.now().strftime('%H:%M:%S')
		cursor.execute("UPDATE users SET user_state = %s, last_date_start_menu = %s, last_time_start_menu = %s, selected_questions = %s, selected_amount = %s WHERE user_id = %s",
				('menu', current_date, current_time, 0, 0, message.from_user.id))
		connection.commit()

		if 'menu' in user_state:
			bot.delete_message(message.chat.id, message.message_id)

		if 'start' in user_state:

			cursor.execute("UPDATE users SET last_menu_message_id = %s WHERE user_id = %s", (message.message_id, message.from_user.id))

			bot.delete_message(message.chat.id, message.message_id)

			# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
			markup = types.InlineKeyboardMarkup()
			btn_tests = types.InlineKeyboardButton('üìù –í—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞–Ω–∏—è', callback_data='settings_tests')
			btn_profil = types.InlineKeyboardButton('üë§ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data='profil')
			btn_feedback = types.InlineKeyboardButton('üõé –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤/–ø–æ–¥–¥–µ—Ä–∂–∫–∞', callback_data='feedback')
			markup.row(btn_tests)
			markup.row(btn_profil)
			markup.row(btn_feedback)
			bot.send_message(message.chat.id, "*üí¨ –ú–µ–Ω—é*", reply_markup=markup,
								  parse_mode="Markdown")

		if ('settings_test' in user_state) or ('profil' in user_state):

			bot.delete_message(message.chat.id, message.message_id)

			cursor.execute("SELECT last_menu_message_id FROM users WHERE user_id = %s", (message.from_user.id, ))
			message_id = cursor.fetchone()[0]

			# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
			markup = types.InlineKeyboardMarkup()
			btn_tests = types.InlineKeyboardButton('üìù –í—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞–Ω–∏—è', callback_data='settings_tests')
			btn_profil = types.InlineKeyboardButton('üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', callback_data='profil')
			btn_feedback = types.InlineKeyboardButton('üõé –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤/–ø–æ–¥–¥–µ—Ä–∂–∫–∞', callback_data='feedback')
			markup.row(btn_tests)
			markup.row(btn_profil)
			markup.row(btn_feedback)
			bot.edit_message_text("*üí¨ –ú–µ–Ω—é*", message.chat.id, message_id+1, reply_markup=markup, parse_mode="Markdown")

	# –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
	connection.commit()
	cursor.close()
	connection.close()


# ---- –í –≠–¢–û–ô –ß–ê–°–¢–ò –ò–î–ï–¢ –û–ë–†–ê–ë–û–¢–ö–ê –ü–†–û–•–û–ñ–î–ï–ù–ò–Ø –¢–ï–°–¢–ê ----
# -------------------------------------------------------------------------------

# –ó–¥–µ—Å—å –º–µ–Ω—é —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —Ç–µ—Å—Ç–æ–≤
@bot.callback_query_handler(func=lambda callback: callback.data == 'settings_tests')
def settings_tests(callback):


	# –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	config = load_config()
	connection = psycopg2.connect(**config)
	cursor = connection.cursor()

	# –ò–∑–º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ settings_test
	cursor.execute("UPDATE users SET user_state = %s WHERE user_id = %s", ('settings_test', callback.from_user.id))

	# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
	markup = types.InlineKeyboardMarkup()
	btn_tasks = types.InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è", callback_data='choise_questions')
	btn_amount = types.InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–º–µ—Ä–æ–≤", callback_data='choise_amount')
	btn_start_test = types.InlineKeyboardButton('–ù–∞—á–∞—Ç—å ‚û°Ô∏è', callback_data='start_test')
	markup.row(btn_tasks)
	markup.row(btn_amount)
	markup.row(btn_start_test)

	# –ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–¥–∞–Ω–∏—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	cursor.execute("SELECT selected_questions FROM users WHERE user_id = %s", (callback.from_user.id, ))
	selected_questions = cursor.fetchone()[0]
	cursor.execute(f"SELECT selected_amount FROM users WHERE user_id = %s", (callback.from_user.id, ))
	selected_amount = cursor.fetchone()[0]

	# –û—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ –∫ –∫–Ω–æ–ø–∫–∞–º —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –∑–∞–¥–∞–Ω–∏—è–º–∏
	if selected_amount == 0 and selected_questions == 0:
		message_text = "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–∞* \n \n–í—ã–±–µ—Ä–∏ –∑–∞–¥–∞–Ω–∏–µ –ï–ì–≠ üìù \n–í—ã–±–µ—Ä–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞–Ω–∏–π üî¢"
	elif selected_amount == -1 and selected_questions == 0:
		message_text = "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–∞* \n \n–í—ã–±–µ—Ä–∏ –∑–∞–¥–∞–Ω–∏–µ –ï–ì–≠ üìù \n–í—ã–±—Ä–∞–Ω –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ä–µ–∂–∏–º ‚úÖ"
	elif selected_amount != 0 and selected_amount != -1 and selected_questions == 0:
		message_text = f"‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–∞* \n \n–í—ã–±–µ—Ä–∏ –∑–∞–¥–∞–Ω–∏–µ –ï–ì–≠ üìù \n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞–Ω–∏–π –ï–ì–≠ - {selected_amount} ‚úÖ"
	elif selected_questions != 0 and selected_amount == 0:
		message_text = f"‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–∞* \n \n–í—ã–±—Ä–∞–Ω–æ –∑–∞–¥–∞–Ω–∏–µ –ï–ì–≠ - {selected_questions} ‚úÖ \n–í—ã–±–µ—Ä–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞–Ω–∏–π üî¢"
	elif selected_questions != 0 and selected_amount == -1:
		message_text = f"‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–∞* \n \n–í—ã–±—Ä–∞–Ω–æ –∑–∞–¥–∞–Ω–∏–µ –ï–ì–≠ - {selected_questions} ‚úÖ \n–í—ã–±—Ä–∞–Ω –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ä–µ–∂–∏–º ‚úÖ"
	elif selected_questions != 0:
		message_text = f"‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–∞* \n \n–í—ã–±—Ä–∞–Ω–æ –∑–∞–¥–∞–Ω–∏–µ –ï–ì–≠ - {selected_questions} ‚úÖ \n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞–Ω–∏–π –ï–ì–≠ - {selected_amount} ‚úÖ"
	else:
		message_text = "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–∞* "

	bot.edit_message_text(message_text, callback.message.chat.id, callback.message.message_id, reply_markup=markup, parse_mode="Markdown")

	# –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
	connection.commit()
	cursor.close()
	connection.close()


# –ó–¥–µ—Å—å —è –æ—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –Ω–æ–º–µ—Ä–∞ –∑–∞–¥–∞–Ω–∏—è
@bot.callback_query_handler(func=lambda callback: callback.data == 'choise_questions')
def select_num_question(callback):

	# –ó–¥–µ—Å—å —è –æ—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –∑–∞–¥–∞–Ω–∏—è
	markup = types.InlineKeyboardMarkup()
	btn_question_num_1 = types.InlineKeyboardButton("1 (–¥–∞—Ç—ã üìÖ)", callback_data='btn_question_num_1')
	markup.row(btn_question_num_1)
	btn_question_num_3 = types.InlineKeyboardButton("3 (—Ñ–∞–∫—Ç - —è–≤–ª–µ–Ω–∏–µ üîç)", callback_data='btn_question_num_3')
	markup.row(btn_question_num_3)
	btn_back = types.InlineKeyboardButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data='come_back_to_settings_test')
	markup.row(btn_back)
	bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è üìù", callback.message.chat.id, callback.message.message_id, reply_markup=markup)


# –í —ç—Ç–æ–π —á–∞—Å—Ç–∏ —è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ä–∞–∑–æ–º –∫–∞–∂–¥—ã–π –∏–∑ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –∑–∞–¥–∞–Ω–∏–π
@bot.callback_query_handler(func=lambda call: call.data.startswith('btn_question_num_'))
def btn_question_num_to_database(callback):

	callback_data = callback.data.split('_')

	# –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	config = load_config()
	connection = psycopg2.connect(**config)
	cursor = connection.cursor()

	cursor.execute("UPDATE users SET selected_questions = %s WHERE user_id = %s", (int(callback.data.split('_')[3]), callback.from_user.id))

	# –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
	connection.commit()
	cursor.close()
	connection.close()

	settings_tests(callback)


# –ó–¥–µ—Å—å —è –æ—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
@bot.callback_query_handler(func=lambda callback: callback.data == 'choise_amount')
def select_choise_amount(callback):

	markup = types.InlineKeyboardMarkup()
	btn_choise_question_5 = types.InlineKeyboardButton("5", callback_data = "btn_choise_question_5")
	btn_choise_question_10 = types.InlineKeyboardButton("10", callback_data="btn_choise_question_10")
	btn_choise_question_20 = types.InlineKeyboardButton("20", callback_data="btn_choise_question_20")
	markup.row(btn_choise_question_5, btn_choise_question_10, btn_choise_question_20)
	btn_choise_question_infinity = types.InlineKeyboardButton("–ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ä–µ–∂–∏–º ‚ôæÔ∏è", callback_data="btn_choise_question_infinity")
	markup.row(btn_choise_question_infinity)
	btn_back = types.InlineKeyboardButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data='come_back_to_settings_test')
	markup.row(btn_back)
	bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ üî¢", callback.message.chat.id, callback.message.message_id, reply_markup=markup)


# –ó–¥–µ—Å—å —è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–º–µ—Ä–æ–≤
@bot.callback_query_handler(func=lambda callback: callback.data.startswith('btn_choise_question_'))
def btn_choise_question_to_database(callback):

	callback_data = callback.data.split('_')

	# –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	config = load_config()
	connection = psycopg2.connect(**config)
	cursor = connection.cursor()

	if callback_data[3] != 'infinity':
		bot.answer_callback_query(callback_query_id=callback.id,
								  text="–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –≤—ã–±–µ—Ä–∏—Ç–µ –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ä–µ–∂–∏–º.",
								  show_alert=True)
		return

	if callback_data[3] == 'infinity':
		cursor.execute("UPDATE users SET selected_amount = %s WHERE user_id = %s", (-1, callback.from_user.id))
	else:
		cursor.execute("UPDATE users SET selected_amount = %s, mode = %s WHERE user_id = %s", (int(callback.data.split('_')[3]), 1, callback.from_user.id))

	# –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
	connection.commit()
	cursor.close()
	connection.close()

	settings_tests(callback)


# –ó–¥–µ—Å—å –∑–∞—Ä–∞–±–æ—Ç–∞–µ—Ç –∫–Ω–æ–ø–∫–∞ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥
@bot.callback_query_handler(func=lambda callback: callback.data == "come_back_to_settings_test")
def come_back_to_settings_test(callback):

	settings_tests(callback)


# –ó–¥–µ—Å—å —è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å–∞–º —Ç–µ—Å—Ç
@bot.callback_query_handler(func=lambda callback: callback.data == 'start_test')
def start_test(callback):

	# –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	config = load_config()
	connection = psycopg2.connect(**config)
	cursor = connection.cursor()

	cursor.execute("SELECT selected_questions, selected_amount FROM users WHERE user_id = %s", (callback.from_user.id, ))
	selected = cursor.fetchone()
	if selected[0] == 0 or selected[1] == 0:
		bot.answer_callback_query(callback_query_id=callback.id,
								  text="–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ç–µ—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è –∏–∑ –ï–ì–≠.", show_alert=True)
		return


	current_date = datetime.datetime.now().strftime('%Y-%m-%d')
	current_time = datetime.datetime.now().strftime('%H:%M:%S')


	cursor.execute("UPDATE statistics SET last_date_start_test = %s, last_time_start_test = %s WHERE user_id = %s", (current_date, current_time, callback.from_user.id))
	connection.commit()

	cursor.execute("SELECT selected_questions FROM users WHERE user_id = %s", (callback.from_user.id, ))
	choise_question = cursor.fetchone()[0]
	connection.commit()

	if choise_question == 1:
		test_send_question_1(callback)
	if choise_question == 3:
		test_send_question_3(callback)



def test_send_question_1(callback):

	# –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	config = load_config()
	connection = psycopg2.connect(**config)
	cursor = connection.cursor()

	# –í—ã–±–∏—Ä–∞—é —Å–∞–º –≤–æ–ø—Ä–æ—Å —Ä–∞–Ω–¥–æ–º–Ω–æ –∏ —Å—Ä–∞–∑—É –∑–∞–ø–∏—Å—ã–≤–∞—é –µ–≥–æ –≤ results
	cursor.execute("SELECT id, question, answer FROM questions_1 ORDER BY RANDOM() LIMIT 1")
	answer = cursor.fetchone()
	cursor.execute("INSERT INTO results (user_id, id, answer_true) VALUES (%s, %s, %s)", (callback.from_user.id, answer[0], answer[2]))

	connection.commit()

	# –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –¥–æ–±–∞–≤–∏—Ç –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –≤ answer_all –≤ —Ä–∞–Ω–¥–æ–º–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
	generate_all_answers_on_question_1(callback)

	# –°–æ–∑–¥–∞—é —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ—Ç–≤–µ—Ç–æ–≤
	cursor.execute("SELECT answer_all FROM results WHERE user_id = %s ORDER BY answer_num_all DESC LIMIT 1", (callback.from_user.id, ))
	answers = cursor.fetchone()[0].strip().strip('{}').split(',')

	markup = types.InlineKeyboardMarkup()
	btn_choise_res_answer_0 = types.InlineKeyboardButton(answers[0], callback_data="btn_choise_res_answer_0")
	btn_choise_res_answer_1 = types.InlineKeyboardButton(answers[1], callback_data="btn_choise_res_answer_1")
	btn_choise_res_answer_2 = types.InlineKeyboardButton(answers[2], callback_data="btn_choise_res_answer_2")
	btn_choise_res_answer_3 = types.InlineKeyboardButton(answers[3], callback_data="btn_choise_res_answer_3")
	markup.row(btn_choise_res_answer_0, btn_choise_res_answer_1, btn_choise_res_answer_2, btn_choise_res_answer_3)
	btn_choise_res_answer_4 = types.InlineKeyboardButton(answers[4], callback_data="btn_choise_res_answer_4")
	btn_choise_res_answer_5 = types.InlineKeyboardButton(answers[5], callback_data="btn_choise_res_answer_5")
	btn_choise_res_answer_6 = types.InlineKeyboardButton(answers[6], callback_data="btn_choise_res_answer_6")
	btn_choise_res_answer_7 = types.InlineKeyboardButton(answers[7], callback_data="btn_choise_res_answer_7")
	markup.row(btn_choise_res_answer_4, btn_choise_res_answer_5, btn_choise_res_answer_6, btn_choise_res_answer_7)
	bot.edit_message_text(answer[1], callback.message.chat.id, callback.message.message_id, reply_markup=markup)

	connection.commit()
	cursor.close()
	connection.close()

def test_send_question_3(callback):

	config = load_config()
	connection = psycopg2.connect(**config)
	cursor = connection.cursor()

	cursor.execute("SELECT id, question, answer FROM questions_3 ORDER BY RANDOM() LIMIT 1")
	answer = cursor.fetchone()
	cursor.execute("INSERT INTO results (user_id, id) VALUES (%s, %s)",
				   (callback.from_user.id, answer[0]))
	connection.commit()

	generate_all_answers_on_question_3(callback)

	# –°–æ–∑–¥–∞—é —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ—Ç–≤–µ—Ç–æ–≤
	cursor.execute("SELECT answer_all FROM results WHERE user_id = %s ORDER BY answer_num_all DESC LIMIT 1", (callback.from_user.id, ))
	answers = cursor.fetchone()[0].strip().strip('{}').split(',')

	# –ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é –≤ —Å—Ç—Ä–æ–∫–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ —è–≤–ª–µ–Ω–∏—è
	cursor.execute("SELECT answer FROM questions_3 WHERE id = %s", (answers[0], ))
	phenomenon_1 = cursor.fetchone()[0]
	cursor.execute("SELECT answer FROM questions_3 WHERE id = %s", (answers[1],))
	phenomenon_2 = cursor.fetchone()[0]
	cursor.execute("SELECT answer FROM questions_3 WHERE id = %s", (answers[2],))
	phenomenon_3 = cursor.fetchone()[0]
	cursor.execute("SELECT answer FROM questions_3 WHERE id = %s", (answers[3],))
	phenomenon_4 = cursor.fetchone()[0]

	cursor.execute("SELECT question FROM questions_3 WHERE id = (SELECT id FROM results WHERE user_id = %s ORDER BY answer_num_all DESC LIMIT 1)", (callback.from_user.id, ))
	fact = cursor.fetchone()[0]

	markup = types.InlineKeyboardMarkup()
	btn_choise_res_answer_0 = types.InlineKeyboardButton("1Ô∏è‚É£", callback_data="btn_choise_res_answer_0")
	btn_choise_res_answer_1 = types.InlineKeyboardButton("2Ô∏è‚É£", callback_data="btn_choise_res_answer_1")
	btn_choise_res_answer_2 = types.InlineKeyboardButton("3Ô∏è‚É£", callback_data="btn_choise_res_answer_2")
	btn_choise_res_answer_3 = types.InlineKeyboardButton("4Ô∏è‚É£", callback_data="btn_choise_res_answer_3")
	markup.row(btn_choise_res_answer_0, btn_choise_res_answer_1, btn_choise_res_answer_2, btn_choise_res_answer_3)
	bot.edit_message_text("–§–ê–ö–¢\n" + fact + "\n"
						  "–Ø–í–õ–ï–ù–ò–Ø \n" +
						  "1. " + phenomenon_1 + "\n"
						  "2. " + phenomenon_2 + "\n"
						  "3. " + phenomenon_3 + "\n"
						  "4. " + phenomenon_4 + "\n",
						  callback.message.chat.id, callback.message.message_id, reply_markup=markup)

	connection.commit()
	cursor.close()
	connection.close()



@bot.callback_query_handler(func=lambda callback: callback.data.startswith('btn_choise_res_answer_'))
def result_answer_in_test(callback):

	# –†–∞–∑–¥–µ–ª—è–µ–º collback_data –≤–æ–ø—Ä–æ—Å–∞ –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ _
	callback_data = callback.data.split('_')
	num_choise = int(callback_data[-1])

	config = load_config()
	connection = psycopg2.connect(**config)
	cursor = connection.cursor()

	cursor.execute("SELECT answer_true, answer_all FROM results WHERE user_id = %s ORDER BY answer_num_all DESC LIMIT 1",(callback.from_user.id, ))
	true_plus_all_answers = cursor.fetchone()
	true = true_plus_all_answers[0]
	all_answers = true_plus_all_answers[1].strip().strip('{}').split(',')

	cursor.execute("SELECT selected_questions FROM users WHERE user_id = %s", (callback.from_user.id, ))
	selected_question = cursor.fetchone()[0]

	if selected_question == 1:
		if true == all_answers[num_choise]:

			cursor.execute("UPDATE results SET correct = %s WHERE user_id = %s AND "
						   "answer_num_all = (SELECT answer_num_all FROM results "
						   "WHERE user_id = %s ORDER BY answer_num_all DESC LIMIT 1)",(True, callback.from_user.id, callback.from_user.id))
			connection.commit()

			markup = types.InlineKeyboardMarkup()
			next_question = types.InlineKeyboardButton("–î–∞–ª—å—à–µ ‚û°Ô∏è", callback_data="next_question")
			markup.row(next_question)
			exit_tests = types.InlineKeyboardButton("–ó–∞–∫–æ–Ω—á–∏—Ç—å ‚¨ÖÔ∏è", callback_data="settings_tests")
			markup.row(exit_tests)
			bot.edit_message_text('–ü—Ä–∞–≤–∏–ª—å–Ω–æ! ‚úÖ', callback.message.chat.id, callback.message.message_id, reply_markup=markup)
		else:

			cursor.execute("UPDATE results SET correct = %s WHERE user_id = %s AND "
						   "answer_num_all = (SELECT answer_num_all FROM results "
						   "WHERE user_id = %s ORDER BY answer_num_all DESC LIMIT 1)",
						   (False, callback.from_user.id, callback.from_user.id))
			cursor.execute("SELECT question FROM questions_1 WHERE id = (SELECT id FROM results WHERE user_id = %s ORDER BY answer_num_all DESC LIMIT 1)", (callback.from_user.id, ))
			question = cursor.fetchone()[0]
			connection.commit()


			markup = types.InlineKeyboardMarkup()
			next_question = types.InlineKeyboardButton("–î–∞–ª—å—à–µ ‚û°Ô∏è", callback_data="next_question")
			markup.row(next_question)
			exit_tests = types.InlineKeyboardButton("–ó–∞–∫–æ–Ω—á–∏—Ç—å ‚¨ÖÔ∏è", callback_data="settings_tests")
			markup.row(exit_tests)
			bot.edit_message_text('–û—à–∏–±–∫–∞ ‚ùå \n' + question + '\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç - ' + true, callback.message.chat.id, callback.message.message_id, reply_markup=markup)

	if selected_question == 3:
		if int(true) == int(num_choise):

			cursor.execute("UPDATE results SET correct = %s WHERE user_id = %s AND "
						   "answer_num_all = (SELECT answer_num_all FROM results "
						   "WHERE user_id = %s ORDER BY answer_num_all DESC LIMIT 1)",
						   (True, callback.from_user.id, callback.from_user.id))
			connection.commit()

			markup = types.InlineKeyboardMarkup()
			next_question = types.InlineKeyboardButton("–î–∞–ª—å—à–µ ‚û°Ô∏è", callback_data="next_question")
			markup.row(next_question)
			exit_tests = types.InlineKeyboardButton("–ó–∞–∫–æ–Ω—á–∏—Ç—å ‚¨ÖÔ∏è", callback_data="settings_tests")
			markup.row(exit_tests)
			bot.edit_message_text('–ü—Ä–∞–≤–∏–ª—å–Ω–æ! ‚úÖ', callback.message.chat.id, callback.message.message_id,
								  reply_markup=markup)

		else:

			cursor.execute("UPDATE results SET correct = %s WHERE user_id = %s AND "
						   "answer_num_all = (SELECT answer_num_all FROM results "
						   "WHERE user_id = %s ORDER BY answer_num_all DESC LIMIT 1)",
						   (False, callback.from_user.id, callback.from_user.id))
			cursor.execute(
				"SELECT question FROM questions_3 WHERE id = (SELECT id FROM results WHERE user_id = %s ORDER BY answer_num_all DESC LIMIT 1)",
				(callback.from_user.id,))
			question = cursor.fetchone()[0]
			cursor.execute("SELECT answer FROM questions_3 WHERE id = %s", (all_answers[int(true)], ))
			true_answer = cursor.fetchone()[0]
			connection.commit()

			markup = types.InlineKeyboardMarkup()
			next_question = types.InlineKeyboardButton("–î–∞–ª—å—à–µ ‚û°Ô∏è", callback_data="next_question")
			markup.row(next_question)
			exit_tests = types.InlineKeyboardButton("–ó–∞–∫–æ–Ω—á–∏—Ç—å ‚¨ÖÔ∏è", callback_data="settings_tests")
			markup.row(exit_tests)
			bot.edit_message_text('–û—à–∏–±–∫–∞ ‚ùå \n' + question + '\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç - ' + true_answer, callback.message.chat.id,
								  callback.message.message_id, reply_markup=markup)


@bot.callback_query_handler(func=lambda callback: callback.data == 'next_question')
def next_question(callback):

	config = load_config()
	connection = psycopg2.connect(**config)
	cursor = connection.cursor()

	cursor.execute("SELECT selected_questions FROM users WHERE user_id = %s", (callback.from_user.id, ))
	selected_question = cursor.fetchone()[0]
	if selected_question == 1:
		test_send_question_1(callback)
	if selected_question == 3:
		test_send_question_3(callback)

	connection.commit()
	cursor.close()
	connection.close()

# -------------------------------------------------------------------


# ---- –í –≠–¢–û–ô –ß–ê–°–¢–ò –ë–£–î–ï–¢ –û–ë–†–ê–ë–û–¢–ö–ê –ü–†–û–§–ò–õ–Ø ----
# -------------------------------------------------------------------

@bot.callback_query_handler(func=lambda callback: callback.data == 'profil')
def choise_profil_in_menu(callback):

	config = load_config()
	connection = psycopg2.connect(**config)
	cursor = connection.cursor()

	cursor.execute("SELECT COUNT(*) FROM results WHERE user_id = %s", (callback.from_user.id, ))
	if cursor.fetchone()[0] == 0:
		bot.answer_callback_query(callback_query_id=callback.id,
								  text="–î–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å —Ö–æ—Ç—è –±—ã –Ω–∞ 1 –≤–æ–ø—Ä–æ—Å.",
								  show_alert=True)
		return

	# –ó–¥–µ—Å—å —è –æ–±–Ω–∞–≤–ª—è—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	cursor.execute("UPDATE users SET user_state = %s WHERE user_id = %s", ("profil", callback.from_user.id))
	connection.commit()

	compilation_of_statistics(callback)

	cursor.execute("SELECT * FROM statistics WHERE user_id = %s", (callback.from_user.id, ))
	profil_data_message = cursor.fetchone()

	bot.edit_message_text("*üë§ –ü—Ä–æ—Ñ–∏–ª—å* \n \n"
						  "–¢—ã —É–∂–µ —Å–¥–µ–ª–∞–ª " + str(profil_data_message[1]) + " –∑–∞–¥–∞–Ω–∏–π \n" +
						  str(profil_data_message[2]) + ("% –∑–∞–¥–∞–Ω–∏–π —Ç—ã –¥–µ–ª–∞–µ—à—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ\n"
						  "–ü–æ—Å–ª–µ–¥–µ–Ω–∏–π —Ä–∞–∑ —Ç—ã –≤—ã–ø–æ–ª–Ω—è–ª —Ç–µ—Å—Ç " + str(profil_data_message[3]) + " –≤ " + str(profil_data_message[4]) + "\n"
						  "–¢–≤–æ–π –ª—é–±–∏–º—ã–π –≤–æ–ø—Ä–æ—Å " + str(profil_data_message[5]) + "\n"
						  "–¢–≤–æ–π –Ω–µ–ª—é–±–∏–º—ã–π –≤–æ–ø—Ä–æ—Å " + str(profil_data_message[6]) + "\n"
						  "–í–æ–ø—Ä–æ—Å, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ç—ã –≤—Å–µ–≥–¥–∞ —É–≤–µ—Ä–µ–Ω " + str(profil_data_message[7]) + "\n"
						  "–í–æ–ø—Ä–æ—Å, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ç—ã –¥–µ–ª–∞–µ—à—å –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –æ—à–∏–±–æ–∫ " + str(profil_data_message[8]) + "\n"),
						  callback.message.chat.id, callback.message.message_id, parse_mode="Markdown")

	connection.commit()
	cursor.close()
	connection.close()



@bot.callback_query_handler(func=lambda callback: callback.data == 'feedback')
def feedback_not_work_yet(callback):

	bot.answer_callback_query(callback_query_id=callback.id,
							  text="–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.",
							  show_alert=True)


bot.polling()
